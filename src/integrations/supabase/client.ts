// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

// Security configuration
const SECURITY_CONFIG = {
  URL_PATTERN: /^https:\/\/[a-zA-Z0-9-]+\.supabase\.co$/,
  KEY_PATTERN: /^eyJ[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$/,
  FILE_UPLOAD: {
    MAX_SIZE: 5 * 1024 * 1024, // 5MB
    ALLOWED_TYPES: [
      "image/jpeg",
      "image/png",
      "image/gif",
      "image/webp",
    ] as const,
    ALLOWED_EXTENSIONS: ["jpg", "jpeg", "png", "gif", "webp"] as const,
  },
} as const;

// Validate environment variables
const validateConfig = () => {
  const url = import.meta.env.VITE_SUPABASE_URL?.trim();
  const key = import.meta.env.VITE_SUPABASE_ANON_KEY?.trim();

  const errors = [];
  if (!url) errors.push("Missing VITE_SUPABASE_URL");
  if (!key) errors.push("Missing VITE_SUPABASE_ANON_KEY");

  if (url && !SECURITY_CONFIG.URL_PATTERN.test(url)) {
    errors.push("Invalid Supabase URL format");
  }

  if (key && !SECURITY_CONFIG.KEY_PATTERN.test(key)) {
    errors.push("Invalid Supabase key format");
  }

  if (errors.length > 0) {
    throw new Error(`Configuration errors: ${errors.join(", ")}`);
  }

  return { url, key };
};

// Initialize client with validated config
const { url: supabaseUrl, key: supabaseKey } = validateConfig();

export const supabase = createClient<Database>(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  },
});

// Test connection and log success/failure but not sensitive details
const testConnection = async () => {
  try {
    const { error } = await supabase.auth.getSession();
    if (error) throw error;
    console.log("✓ Supabase connection successful");
  } catch (error) {
    console.error("✗ Supabase connection error");
  }
};

// Run connection test
testConnection();
